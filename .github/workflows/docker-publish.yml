name: Docker Publish

on:
  push:
    branches: [ "master" ]
    tags:
      - 'v*.*.*'

permissions:
  contents: read
  packages: write

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=sha

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
      - name: Notify Telegram (success)
        if: success()
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          curl -sS -X POST "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage" \
            -H 'Content-Type: application/json' \
            -d '{"chat_id":"'"${TELEGRAM_CHAT_ID}"'","text":"Docker publish OK: '${{ github.repository }}' @ '${{ github.ref_name }}'"}'
      - name: Notify Telegram (failure)
        if: failure()
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          curl -sS -X POST "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage" \
            -H 'Content-Type: application/json' \
            -d '{"chat_id":"'"${TELEGRAM_CHAT_ID}"'","text":"Docker publish FAIL: '${{ github.repository }}' @ '${{ github.ref_name }}'"}'

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      - name: Prepare remote directory
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} 'mkdir -p ~/newbotksenia'
      - name: Copy compose to VPS
        run: |
          scp -o StrictHostKeyChecking=no docker-compose.prod.yml ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:~/newbotksenia/docker-compose.yml
      - name: Create env file locally
        env:
          APP_IMAGE: ghcr.io/${{ github.repository }}:${{ github.ref_name }}
          MONGO_URI: ${{ secrets.MONGO_URI }}
          N8N_TOKEN: ${{ secrets.N8N_TOKEN }}
          YANDEX_GEOCODER_API_KEY: ${{ secrets.YANDEX_GEOCODER_API_KEY }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          cat > vps.env << EOF
APP_IMAGE=${APP_IMAGE}
MONGO_URI=${MONGO_URI}
N8N_TOKEN=${N8N_TOKEN}
YANDEX_GEOCODER_API_KEY=${YANDEX_GEOCODER_API_KEY}
TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
TELEGRAM_CHAT_ID=${TELEGRAM_CHAT_ID}
EOF
      - name: Upload env to VPS
        run: |
          scp -o StrictHostKeyChecking=no vps.env ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:~/newbotksenia/.env
      - name: Deploy on VPS
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} '
            set -e
            mkdir -p ~/newbotksenia
            cd ~/newbotksenia
            docker login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}
            docker compose --env-file .env down || true
            docker compose --env-file .env pull || true
            docker compose --env-file .env up -d
          '
      - name: Notify Telegram (deploy)
        if: success()
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          curl -sS -X POST "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage" \
            -H 'Content-Type: application/json' \
            -d '{"chat_id":"'"${TELEGRAM_CHAT_ID}"'","text":"Deploy OK: '${{ github.repository }}' на VPS (порт 7001)"}'


